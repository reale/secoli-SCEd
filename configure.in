# -*- mode: m4; -*-
dnl Process this file with autoconf  2.50 (or higher) to produce a configure script.
AC_PREREQ(2.59)
AC_INIT(SCEd, 0.1.5)
AM_INIT_AUTOMAKE(1.7)

AC_CONFIG_HEADERS(config.h)

AC_CANONICAL_HOST
case "$host" in
*-*-*linux*)      dnl i586-pc-linux-gnu
	AC_DEFINE([LINUX],[1],[Define if you're using Linux.])
	ac_system_host=Linux
	;;
*-*-*solaris*)
	AC_DEFINE([SOLARIS],[1],[Define if you're using Solaris.])
	ac_system_host=Solaris
	;;
*-*-*openbsd*)    dnl i386-unknown-openbsd3.0
	AC_DEFINE([OPENBSD],[1],[Define if you're using OpenBSD.])
	ac_system_host=OpenBSD
	;;
*-*-*netbsd*)
	AC_DEFINE([NETBSD],[1],[Define if you're using NetBSD.])
	ac_system_host=NetBSD
	;;
*-*-*freebsd*)
	AC_DEFINE([FREEBSD],[1],[Define if you're using FreeBSD.])
	ac_system_host=FreeBSD
	;;
*-*-*darwin*)
	AC_DEFINE([DARWIN],[1],[Define if you're using Darwin/Mac OS X.])
	ac_system_host=Darwin
	;;
esac
AC_DEFINE_UNQUOTED([SYSTEM_HOST], [$ac_system_host], [Set this to your system host (Linux, Solaris, OpenBSD, NetBSD, FreeBSD or Darwin)])

dnl treat Darwin special in Makefiles
AM_CONDITIONAL(DARWIN, test x$ac_system_host = xDarwin)

AC_MSG_CHECKING([whether to enable debugging])
AC_ARG_ENABLE(debug,
  [AS_HELP_STRING([--enable-debug], [show debug information])],
  [ if test "$enableval" != "no"; then
        AC_DEFINE(DEBUG, [1], [Define to 1 to show debug information])
        debug="yes"
    else
        debug="no"
    fi ],
  [ debug=no ]
)
AC_MSG_RESULT($debug)

if test $debug = "yes"; then
dnl Enable debugging information with minimal optimisation if not set differently
dnl (the spaces before $CFLAGS and -O are significant)
	CFLAGS="$CFLAGS -g"
	if ! echo " $CFLAGS" | grep -q -- " -O" ; then
		CFLAGS="$CFLAGS -O"
	fi
else
dnl Maximum optimisation if not already set
dnl (the spaces before $CFLAGS and -O are significant)
	if ! echo " $CFLAGS" | grep -q -- " -O" ; then
		CFLAGS="$CFLAGS -O3"
	fi
fi

dnl Checks for programs used in building
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_RANLIB
AM_PROG_CC_C_O
AC_PATH_PROG([XMLTO], [xmlto], [no])
AC_LANG(C++)

dnl AC_CHECK_HEADERS(iostreams)

dnl Avoid unused static function warnings
CFLAGS="-Wall $CFLAGS"
export CFLAGS

dnl Solaris
AC_CHECK_FUNC(gethostbyname,,[AC_CHECK_LIB(nsl,gethostbyname)])
AC_CHECK_FUNC(connect,,[AC_CHECK_LIB(socket,connect)])
AC_CHECK_FUNC(inet_aton,,[AC_CHECK_LIB(resolv,inet_aton)])
AC_CHECK_LIB(kstat, kstat_open)
AC_CHECK_LIB(posix4, nanosleep)
AC_CHECK_FUNCS(getloadavg swapctl)
AC_CHECK_HEADERS(procfs.h sys/procfs.h sys/loadavg.h utmpx.h)

dnl Some versions of Solaris require -lelf for -lkvm
AC_CHECK_LIB(kvm, kvm_open,[
  LIBS="-lkvm $LIBS"
],[AC_MSG_CHECKING([for kvm_open in -lkvm with -lelf])
   AC_CACHE_VAL(ac_cv_lib_kvm_with_elf,
   [ac_save_LIBS="$LIBS"
    LIBS="-lkvm -lelf $LIBS"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([[char kvm_open();]], [[kvm_open()]])],[ac_cv_lib_kvm_with_elf=yes],[ac_cv_lib_kvm_with_elf=no])
    LIBS="$ac_save_LIBS"
   ])
   if test "$ac_cv_lib_kvm_with_elf" = "yes"; then
     AC_MSG_RESULT(yes)
     LIBS="-lkvm -lelf $LIBS"
   else
     AC_MSG_RESULT(no)
   fi
])

dnl NetBSD, OpenBSD and FreeBSD
AC_CHECK_HEADERS(sched.h sys/types.h machine/pio.h machine/sysarch.h sys/cpuvar.h machine/apm_bios.h)
ETR_SYSV_IPC
ETR_UNION_SEMUN

dnl machine/cpufunc.h needs additional header on FreeBSD
AC_CHECK_HEADERS([machine/cpufunc.h], [], [],
[[#if HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
]])

dnl sched_setscheduler on OpenBSD
AC_CHECK_FUNCS(sched_setscheduler)
AC_CHECK_LIB(posix4, sched_setscheduler, [
	AC_DEFINE([HAVE_SCHED_SETSCHEDULER], [1],
		[Define if you have the sched_setscheduler function.])
])
AC_CHECK_LIB(rt, sched_setscheduler, [
	AC_DEFINE([HAVE_SCHED_SETSCHEDULER], [1],
		[Define if you have the sched_setscheduler function.])
])

dnl i386_get_ioperm on NetBSD&OpenBSD
AC_CHECK_LIB(i386, i386_get_ioperm,
	LIBS="-li386 $LIBS"
	AC_DEFINE([HAVE_I386_IOPERM_NETBSD], [1],
		[Define if you have the NetBSD&OpenBSD version of i386_ioperm functions.]),[
        dnl i386_get_ioperm on FreeBSD
        AC_CHECK_LIB(c, i386_get_ioperm,
		AC_DEFINE([HAVE_I386_IOPERM_FREEBSD],[1],
			[Define if you have the FreeBSD version of the i386_ioperm functions.]),
		[])]
)

AC_CHECK_FUNCS(iopl)
AC_CHECK_FUNCS(ioperm)
AC_CHECK_HEADERS(sys/io.h)


dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h sys/io.h errno.h)
AC_CHECK_HEADERS(limits.h kvm.h sys/param.h sys/dkstat.h)

dnl check sys/sysctl.h seperately, as it requires other headers on at least OpenBSD
AC_CHECK_HEADERS([sys/sysctl.h], [], [],
[[#if HAVE_SYS_PARAM_H
# include <sys/param.h>
#endif
]])

dnl On FreeBSD >= 8 checking sys/pcpu.h fails without sys/param.h and kvm.h
AC_CHECK_HEADERS([sys/pcpu.h], [], [],
[[#if HAVE_SYS_PARAM_H
# include <sys/param.h>
#endif
#if HAVE_KVM_H
# include <kvm.h>
#endif
]])


dnl Check for particular preprocessor macros
#LCD_SA_RESTART

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_UID_T

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(select socket strdup strerror strtol uname cfmakeraw snprintf) 


# check for doxygen
#BB_ENABLE_DOXYGEN


# directory for PID files
pidfiledir=/var/run
# make sure the directory exists
if test ! -d $pidfiledir ; then
        pidfiledir=`eval echo ${sysconfdir}`
	case $pidfiledir in
		NONE/*) pidfiledir=`echo $pidfiledir | sed "s~NONE~$ac_default_prefix~"` ;;
	esac
fi

AC_ARG_WITH(pidfile-dir,
	[AS_HELP_STRING([--with-pidfile-dir=PATH], [specify location of pid files [/var/run]])],
	[ if test -n "$withval"  &&  test "x$withval" != "xno"  &&  \
	     test "x${withval}" != "xyes"; then
		pidfiledir=$withval
		if test ! -d $pidfiledir ; then
			AC_MSG_WARN([** no $pidfiledir directory on this system **])
		fi
	fi ]
)

AC_SUBST(pidfiledir)



LIBS="-luuid -lsqlite3 -lglib-2.0 -ljansson -llua5.3.4 -lconfig -lvrb -llog4c -ldb -levent $LIBS"
CFLAGS="-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/lib/i386-linux-gnu/glib-2.0/include -I/usr/include/lua5.3 $CFLAGS -ggdb"

AC_CONFIG_FILES([Makefile
	src/Makefile
	scripts/Makefile
	scripts/init-SCEd.LSB])
AC_OUTPUT
